// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: datastreams/datastreams.proto

package datastreams

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataStreamService_Exchange_FullMethodName = "/datastreams.DataStreamService/Exchange"
	DataStreamService_Register_FullMethodName = "/datastreams.DataStreamService/Register"
)

// DataStreamServiceClient is the client API for DataStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataStreamServiceClient interface {
	Exchange(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Register(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error)
}

type dataStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStreamServiceClient(cc grpc.ClientConnInterface) DataStreamServiceClient {
	return &dataStreamServiceClient{cc}
}

func (c *dataStreamServiceClient) Exchange(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DataStreamService_Exchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStreamServiceClient) Register(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, DataStreamService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataStreamServiceServer is the server API for DataStreamService service.
// All implementations must embed UnimplementedDataStreamServiceServer
// for forward compatibility
type DataStreamServiceServer interface {
	Exchange(context.Context, *Message) (*emptypb.Empty, error)
	Register(context.Context, *Application) (*Application, error)
	mustEmbedUnimplementedDataStreamServiceServer()
}

// UnimplementedDataStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataStreamServiceServer struct {
}

func (UnimplementedDataStreamServiceServer) Exchange(context.Context, *Message) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedDataStreamServiceServer) Register(context.Context, *Application) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDataStreamServiceServer) mustEmbedUnimplementedDataStreamServiceServer() {}

// UnsafeDataStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataStreamServiceServer will
// result in compilation errors.
type UnsafeDataStreamServiceServer interface {
	mustEmbedUnimplementedDataStreamServiceServer()
}

func RegisterDataStreamServiceServer(s grpc.ServiceRegistrar, srv DataStreamServiceServer) {
	s.RegisterService(&DataStreamService_ServiceDesc, srv)
}

func _DataStreamService_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStreamServiceServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStreamService_Exchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStreamServiceServer).Exchange(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStreamService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStreamServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataStreamService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStreamServiceServer).Register(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

// DataStreamService_ServiceDesc is the grpc.ServiceDesc for DataStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datastreams.DataStreamService",
	HandlerType: (*DataStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exchange",
			Handler:    _DataStreamService_Exchange_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _DataStreamService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datastreams/datastreams.proto",
}
