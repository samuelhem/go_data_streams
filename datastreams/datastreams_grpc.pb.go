// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: datastreams/datastreams.proto

package datastreams

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Datastream_Exchange_FullMethodName = "/datastreams.Datastream/Exchange"
	Datastream_Register_FullMethodName = "/datastreams.Datastream/Register"
)

// DatastreamClient is the client API for Datastream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatastreamClient interface {
	Exchange(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Register(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error)
}

type datastreamClient struct {
	cc grpc.ClientConnInterface
}

func NewDatastreamClient(cc grpc.ClientConnInterface) DatastreamClient {
	return &datastreamClient{cc}
}

func (c *datastreamClient) Exchange(ctx context.Context, in *Message, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Datastream_Exchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastreamClient) Register(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Datastream_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatastreamServer is the server API for Datastream service.
// All implementations must embed UnimplementedDatastreamServer
// for forward compatibility
type DatastreamServer interface {
	Exchange(context.Context, *Message) (*emptypb.Empty, error)
	Register(context.Context, *Application) (*Application, error)
	mustEmbedUnimplementedDatastreamServer()
}

// UnimplementedDatastreamServer must be embedded to have forward compatible implementations.
type UnimplementedDatastreamServer struct {
}

func (UnimplementedDatastreamServer) Exchange(context.Context, *Message) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedDatastreamServer) Register(context.Context, *Application) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedDatastreamServer) mustEmbedUnimplementedDatastreamServer() {}

// UnsafeDatastreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatastreamServer will
// result in compilation errors.
type UnsafeDatastreamServer interface {
	mustEmbedUnimplementedDatastreamServer()
}

func RegisterDatastreamServer(s grpc.ServiceRegistrar, srv DatastreamServer) {
	s.RegisterService(&Datastream_ServiceDesc, srv)
}

func _Datastream_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastreamServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datastream_Exchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastreamServer).Exchange(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastream_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastreamServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Datastream_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastreamServer).Register(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

// Datastream_ServiceDesc is the grpc.ServiceDesc for Datastream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Datastream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datastreams.Datastream",
	HandlerType: (*DatastreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exchange",
			Handler:    _Datastream_Exchange_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Datastream_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datastreams/datastreams.proto",
}
